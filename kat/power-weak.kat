let sync = [R|W]; po; [F;SC]; po; [R|W] | [R|W]; po; [SC;(R|W)] // last cl
let lwsync = po; [F]; po | [ACQ;R]; po | po;[REL;W];po?;[W] // last 2cl
let fence = sync | [R]; lwsync; [W|R] | [R|W]; lwsync; [W]

let ppo = [R]; (rfi | rmw)+; [R|W]
let hb = ppo | fence | rfe // assume empty ppo

let prop1 = rfe?; fence; hb*
let prop2 = (fence; hb*)?; sync; hb*
// let rprop2 =  (fence; hb*)?; sync; hb*; fr; rfe?
// let prop = prop1 | prop2  // | rprop2

let obs = (fr|mo); prop1; hb*
let robs = prop1; hb*;(fr|mo) | hb*;(fr|mo);prop1

let eco = (rf | mo | fr)+

let ar = obs | (mo | fr | rfe | prop2)+ | (mo|rfe|prop1)+ | hb+ | eco*;po?;eco* | robs
