// ---------------------------------------------------------------------
// Definition of standard relations
// ---------------------------------------------------------------------

// Extended coherence order
let eco = (rf | mo | fr)+

// Same location
let loc = loc-overlap ^=

// ---------------------------------------------------------------------
// RC11 Happens-before
// ---------------------------------------------------------------------

let ppo = po

let sw = [REL] ; ([F] ; po)? ; (rf ; rmw)* ; rf ; (po ; [F])? ; [ACQ]
let hb = (po | sw)+

// ---------------------------------------------------------------------
// RC11 Consistency axioms
// ---------------------------------------------------------------------

// No load buffering
// acyclic (po | rf)

// // Coherence : Optimize the checking of irreflexive (hb ; eco)
// coherence (hb_stable)

// // RMW atomicity
// check  mo-imm ; [UW] <= rf ; po-imm


// Sequential consistency order
let FSC = [F] ; [SC]
let fhb = [F] ; hb
let hbf = hb ; [F]
let scb = po | rf | mo | fr
let psc = [SC] ; po ; hb ; po ; [SC]
        | [SC] ; fhb? ; scb ; hbf? ; [SC]
        | FSC ; hb ; FSC
        | FSC ; hb ; eco ; hb ; FSC
        | SC ; po ; SC
acyclic psc

// // ---------------------------------------------------------------------
// // RC11 error detection
// // ---------------------------------------------------------------------

// let ww_conflict = [W] ; loc-overlap ; [W]
// let wr_conflict = [W] ; loc-overlap ; [R] | [R] ; loc-overlap ; [W]
// let conflicting = ww_conflict | wr_conflict
// let na_conflict = [NA] ; conflicting | conflicting ; [NA]

// error UninitializedRead unless  [RfInit] ; [IsDynamicLoc] = 0

// error AccessNonAlloc    unless  alloc <= hb_stable
// error DoubleFree        unless  [Free|HpRetire] ; loc-overlap ; [Free|HpRetire] = 0
// error UseAfterFree      unless  loc-overlap ; [Free] <= hb_stable
// error UseAfterFree      unless  [Free] ; loc-overlap = 0
// error UseAfterFree      unless  [NotHpProtected] ; loc-overlap ; [HpRetire] <= hb_stable
// error UseAfterFree      unless  [HpRetire] ; loc-overlap ; [NotHpProtected] = 0

// error NotAtomicRace     unless  na_conflict <= hb_stable

// warning WWRace          unless  ww_conflict <= hb_stable
