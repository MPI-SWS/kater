// clang-format off
%skeleton "lalr1.cc" // -*- C++ -*-
%require "3.2"

// %define api.token.raw
%define api.token.constructor
%define api.token.prefix {TOK_}
%define api.value.type variant
%define parse.assert
%define parse.trace
// %define parse.error detailed
%define parse.error custom
// %define parse.lac full
%locations

%code requires {
  #include <string>
  #include "Constraint.hpp"
  class ParsingDriver;
  extern char *current_line;
  extern void reset_current_line();
}

%param { ParsingDriver& drv }

%code {
 /*
  * KATER -- Automating Weak Memory Model Metatheory
  *
  * This program is free software; you can redistribute it and/or modify
  * it under the terms of the GNU General Public License as published by
  * the Free Software Foundation; either version 3 of the License, or
  * (at your option) any later version.
  *
  * This program is distributed in the hope that it will be useful,
  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  * GNU General Public License for more details.
  *
  * You should have received a copy of the GNU General Public License
  * along with this program; if not, you can access it online at
  * http://www.gnu.org/licenses/gpl-3.0.html.
  */

  #include "RegExp.hpp"
  #include "ParsingDriver.hpp"
  #include <iostream>
  #include <memory>
  #include <unordered_map>
  #include <vector>

  VSet<Predicate::ID> combinePredSets(VSet<Predicate::ID> current,
				       Predicate p,
				       const yy::location &loc);
}


%token
  ACYCLIC   "acyclic"
  REC_AND   "and"
  ASSUME    "assume"
  ASSERT    "assert"
  COHERENCE "coherence"
  DISJOINT  "disjoint"
  ERROR	    "error"
  EXPORT    "export"
  EXTRA     "extra"
  GENMC     "genmc"
  ID_REL    "id"
  INCLUDE   "include"
  LET	    "let"
  PREDICATE "predicate"
  REC       "rec"
  RECOVERY  "recovery"
  RELATION  "relation"
  ROT       "rot"
  TOTAL     "total"
  VIEW      "view"
  UNLESS    "unless"
  WARNING   "warning"
  COLON     ":"
  DCOLON    "::"
  COMMA     ","
  ZERO      "0"
  MONE      "-1"
  EQ        "="
  LEQ       "<="
  SEMI      ";"
  AND       "&"
  ALT       "|"
  BSLASH    "\\"
  PLUS      "+"
  STAR      "*"
  QMARK     "?"
  LPAREN    "("
  RPAREN    ")"
  LBRACK    "["
  RBRACK    "]"
  SUPER     "^"
  POUND     "#"
;

%token YYEOF 0

%token <std::string> ID;
%token <std::string> QSTRING;
%nterm <std::string> qualified_ID;
%nterm <std::string> print_ID;
%nterm <std::unique_ptr<RegExp>> rel;
%nterm <std::pair<std::string, std::unique_ptr<RegExp>>> def;
%nterm <std::vector<std::pair<std::string, std::unique_ptr<RegExp>>>> def_list;
%nterm <VSet<Predicate::ID>> pred_list;
%nterm <std::unique_ptr<Constraint>> assert_constraint;
%nterm <std::unique_ptr<Constraint>> assume_constraint;
%nterm <std::unique_ptr<Constraint>> export_constraint;
%nterm <std::unique_ptr<Constraint>> unless_clause;
%nterm <std::unique_ptr<Constraint>> unless_opt;
%nterm <std::optional<std::string>> as_extra_opt;

%precedence "=" "<="
%left  "|"
%left  "\\" "&"
%left  ";"
%precedence "+" "*" "?" "^"
%precedence "rot"

%printer { yyo << *($$); } <std::unique_ptr<RegExp>>;
%printer { yyo << *($$); } <std::unique_ptr<Constraint>>;
%printer { yyo << "<" << ($$).first << ", " << *($$).second; } <std::pair<std::string, std::unique_ptr<RegExp>>>;
%printer { for (auto &s : $$) yyo << s.first << *s.second << " "; } <std::vector<std::pair<std::string, std::unique_ptr<RegExp>>>>;
%printer { yyo << $$.has_value() ? *$$ : ""; } <std::optional<std::string>>;
%printer { yyo << $$; } <*>;

%start main
%%

main:	  %empty		{ }
	| main decl		{ }
        ;

decl:     "include" QSTRING                { drv.parse($2.substr(1, $2.size()-2)); }
	| "relation" ID print_ID           { drv.registerRelation($2, std::move($3), @$); }
	| "predicate" ID print_ID          { drv.registerPredicate(std::move($2), std::move($3), @$); }
	| "disjoint" pred_list             { drv.registerDisjointPreds($2); }
	| "let" def                        { drv.registerDerived(LetStatement::create(std::move($2.first), std::move($2.second), NoSavedExp::create(), DbgInfo(@$.end.filename, @$.end.line)), @$); }
	| "let" "rec" def_list             { drv.registerRecDerived(std::move($3), @$);	}
	| "view" def			   { drv.registerViewDerived(LetStatement::create(std::move($2.first), $2.second->clone(), ViewExp::create($2.second->clone()), DbgInfo(@$.end.filename, @$.end.line)), @$); }
	| "view" "rec" def_list		   { drv.registerRecViewDerived(std::move($3), @$); }
	| "assume" assume_constraint	   { drv.registerAssume(AssumeStatement::create(std::move($2), false)); }
	| "assert" assert_constraint	   { drv.registerAssert(AssertStatement::create(std::move($2), DbgInfo(@$.end.filename, @$.end.line))); }
	| "export" as_extra_opt export_constraint unless_opt print_ID { drv.registerExport(ExportStatement::create(std::move($3), std::move($4), std::move($5), std::move($2)), @$); }
	;

def:      ID "=" rel { $$ = std::make_pair(std::move($1), std::move($3)); }
	;

def_list: def                            { std::vector<std::pair<std::string, std::unique_ptr<RegExp>>> ps; ps.push_back(std::move($1)); $$ = std::move(ps); }
	| def_list "and" def             { $1.push_back(std::move($3)); $$ = std::move($1); }
	;

pred_list: qualified_ID                  { $$ = combinePredSets({}, drv.getRegisteredIDAsPredicate(std::move($1), @$), @$); }
	| pred_list POUND qualified_ID   { $$ = combinePredSets(std::move($1), drv.getRegisteredIDAsPredicate(std::move($3), @$), @$); }

assert_constraint:
	  rel "=" rel		{ $$ = EqualityConstraint::createOpt(std::move($1), std::move($3), false, false); }
	| rel "<=" rel		{ $$ = SubsetConstraint::createOpt(std::move($1), std::move($3), false, false); }
	;

assume_constraint:
	  assert_constraint     { $$ = std::move($1); }
	| "total" rel		{ $$ = TotalityConstraint::createOpt(std::move($2)); }
	;

as_extra_opt: %empty { $$ = std::nullopt; }
	| "extra" ID { $$ = std::move($2); }
	;

export_constraint:
	  "acyclic" rel      { $$ = AcyclicConstraint::createOpt(std::move($2)); }
	| "coherence" ID     { $$ = CoherenceConstraint::create(std::move($2)); }
        | "error" ID 	     { $$ = ErrorConstraint::create($2); }
	| "warning" ID 	     { $$ = WarningConstraint::create($2); }
	| assert_constraint  { $$ = std::move($1); }
	;

unless_clause:
	 "unless" assert_constraint { $$ = std::move($2); }
	;

unless_opt: %empty      { $$ = nullptr; }
	| unless_clause	{ $$ = std::move($1); }
	;

rel:	  "0"			{ $$ = RegExp::createFalse(); }
	| "id"			{ $$ = RegExp::createId(); }
	| qualified_ID		{ $$ = drv.getRegisteredREOrCreateTmpRec(std::move($1), @$); }
	| "(" rel ")"		{ $$ = std::move($2); }
	| "[" rel "]"		{ $$ = std::move($2); /* bracket is a NOP for now */ }
	| "[" "]"		{ $$ = RegExp::createId(); }
	| rel "|" rel		{ $$ = AltRE::createOpt(std::move($1), std::move($3)); }
	| rel ";" rel		{ $$ = SeqRE::createOpt(std::move($1), std::move($3)); }
	| rel "&" rel		{ $$ = AndRE::createOpt(std::move($1), std::move($3)); }
	| rel "\\" rel		{ $$ = MinusRE::create(std::move($1), std::move($3)); }
	| rel "*"		{ $$ = StarRE::createOpt(std::move($1)); }
	| rel "+"		{ $$ = PlusRE::createOpt(std::move($1)); }
	| rel "?"		{ $$ = QMarkRE::createOpt(std::move($1)); }
	| "rot" rel		{ $$ = RotRE::createOpt(std::move($2)); }
	| rel "^" "-1" 		{ $1->flip(); $$ = std::move($1); }
	| rel "^" "=" 		{ $$ = RegExp::createSym(std::move($1)); }
	;

qualified_ID: ID        { $$ = $1; }
	| ID "::" ID    { $$ = $1 + "::" + $3; }
	;

print_ID: %empty                      { $$ = std::string(); }
	| "(" "genmc" ":" QSTRING ")" { $$ = std::move($4.substr(1, $4.size()-2)); }
	;
%%

void yy::parser::error(const location_type &l, const std::string &m)
{
	std::cerr << "\n" << l << ": " << m << "\n";
}

void yy::parser::report_syntax_error(const yy::parser::context &ctx) const
{
	std::cerr << ctx.location() << ": error";

	/* Report expected tokens */
	{
		enum { TOKENMAX = 5 };
		symbol_kind_type expected[TOKENMAX];

		auto n = ctx.expected_tokens(expected, TOKENMAX);
		for (auto i = 0; i < n; i++)
			std::cerr << (i == 0 ? ": expected \'" : "\' or \'") << symbol_name(expected[i]);
		if (n > 0)
			std::cerr << "\'";
	}

	/* Report the unexpected token */
	{
		auto lookahead = ctx.token();
		if (lookahead != symbol_kind::S_YYEMPTY)
			std::cerr << " before \'" << symbol_name (lookahead) << "\'";
	}

	std::cerr << '\n';

	/* Quote the source line */
	{
		auto &loc = ctx.location();
		std::cerr << current_line;
		for (auto i = 0; i < loc.begin.column-1; i++)
			std::cerr << " ";
		std::cerr << "^";
		for (auto i = loc.begin.column+1; i < loc.end.column; i++)
			std::cerr << "~";
		std::cerr << "\n";
		reset_current_line();
	}
}

// FIXME: Go over all registered predicates to ensure they are disjoint
VSet<Predicate::ID>
combinePredSets(VSet<Predicate::ID> current, Predicate p, const yy::location &loc)
{
	if (!current.insert(p.getID()).second) {
		std::cerr << loc << ": ";
		std::cerr << p << " already in disjoint set\n";
	}
	return current;
}
// clang-format on
