include "../../../kat/rc11.kat"

// Define a simplified version of POWER in-place
// include "../kat/power-fm-simpl.kat"

let sync = [R|W]; po; [F;SC]; po; [R|W]
let lwsync = po;[F];po // | [R;ACQ];po // | po;[REL;W];po?;[W]
let fence = sync | [R]; lwsync; [W|R] | [R|W]; lwsync; [W]

let ppo = // [R]; po-loc; [W] |
[R];(rmw|rfi)+;[W|R]
let hb = ppo | fence | rfe // assume almost empty ppo

let prop1 = [W]; rfe?; fence; hb*; [W]
let prop2 = fr?; rfe?; (fence; hb*)?; sync; hb*
let prop = prop1 | prop2

let obs = fr; prop1; hb*

let ar = obs | (mo | prop)+

// Compilation proof

assume [R;ACQ];po <= [R;ACQ];po;[F];po
assume po;[REL;W] <= po;[F];po;[REL;W]
assume rf;rmw <= mo

assert (fr;rf?) ; rc11::hb;[R|W] & id <= obs | (rc11::eco)+;po?;(rc11::eco)*
assert (mo;rfe?) ; rc11::hb;[W] & id <= (mo |prop)+ | (rc11::eco)+;po?;(rc11::eco)*
assert rfe ; rc11::hb;[W] & id <= (hb)+ | (rc11::eco)+;po?;(rc11::eco)*

// assert (rf| fr;rf? | mo;rf?) ; rc11::hb;[R|W] <=&id obs | (hb)+ | (mo |prop)+ | (rc11::eco)+;po?;(rc11::eco)*

// assert (fr;rf?) ; rc11::hb;[R] <=&id obs | (hb)+ | (mo |prop)+ | (rc11::eco)+;po?;(rc11::eco)*
